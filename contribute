// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CrowdfundingETH {
    address public owner;
    uint256 public goal;
    uint256 public deadline;
    bool public isFundingOpen;
    uint256 public totalContributions;
    mapping(address => uint256) public contributions;
    address[] public contributors;

    event FundingReceived(address indexed contributor, uint256 amount);
    event FundingGoalReached(uint256 totalAmount);
    event FundsWithdrawn(address indexed owner, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier deadlineReached() {
        require(block.timestamp >= deadline, "Deadline not reached yet");
        _;
    }

    constructor(uint256 _goal, uint256 durationDays) {
        owner = msg.sender;
        goal = _goal;
        deadline = block.timestamp + durationDays * 1 days;
        isFundingOpen = true;
    }

    function contribute() external payable {
        require(isFundingOpen, "Funding is closed");
        require(block.timestamp < deadline, "Crowdfunding has ended");
        require(msg.value > 0, "Contribution amount must be greater than 0");

        if (contributions[msg.sender] == 0) {
            contributors.push(msg.sender);
        }

        contributions[msg.sender] += msg.value;
        totalContributions += msg.value;

        emit FundingReceived(msg.sender, msg.value);

        if (totalContributions >= goal) {
            isFundingOpen = false;
            emit FundingGoalReached(totalContributions);
        }
    }

    function withdrawFunds() external onlyOwner deadlineReached {
        require(totalContributions >= goal, "Funding goal not reached");
        uint256 contractBalance = address(this).balance;
        payable(owner).transfer(contractBalance);

        emit FundsWithdrawn(owner, contractBalance);
    }

    function getContributorsCount() external view returns (uint256) {
        return contributors.length;
    }
}
